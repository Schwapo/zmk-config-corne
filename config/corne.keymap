#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define BASE 0
#define LOWER 1
#define RAISE 2
#define VALORANT 3
#define LTLAYER 4

/ {
    combos {
        compatible = "zmk,combos";

        combo_enter {
            timeout-ms = <2000>;
            key-positions = <39 40 41>;
            layers = <BASE LOWER RAISE>;
            bindings = <&to VALORANT>; 
        };
        
        combo_exit {
            timeout-ms = <2000>;
            key-positions = <39 40 41>;
            layers = <VALORANT>;
            bindings = <&to BASE>; 
        };

        combo_Function {
            timeout-ms = <5000>;
            key-positions = <19 20 21 22>;
            layers = <LTLAYER>;
            bindings = <&function_macro>;
        };
    };

    macros {
        function_macro: function_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap &kp ESC &kp H &kp I &kp SPACE &kp ESC &kp L &kp A &kp ENTER &kp ESC &mt LEFT_SHIFT O &kp TAB>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base_layer {
            bindings = <
              &kp TAB    &kp Q  &kp W  &kp E     &kp R      &kp T            &kp Y       &kp U      &kp I      &kp O       &kp P          &kp BACKSPACE
              &kp LCTRL  &kp A  &kp S  &kp D     &kp F      &kp G            &kp H       &kp J      &kp K      &kp L       &kp SEMICOLON  &kp SINGLE_QUOTE
              &kp LSHFT  &kp Z  &kp X  &kp C     &kp V      &kp B            &kp N       &kp M      &kp COMMA  &kp PERIOD  &kp SLASH      &kp ESCAPE
                                       &kp LGUI  &mo LOWER  &kp SPACE        &kp RETURN  &mo RAISE  &kp RALT
            >;
        };

        Lower_layer {
            bindings = <
              &kp TAB     &kp N1        &kp N2        &kp N3        &kp N4        &kp N5              &kp N6      &kp N7    &kp N8    &kp N9     &kp N0  &kp BACKSPACE
              &bt BT_CLR  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_SEL 5        &kp LEFT    &kp DOWN  &kp UP    &kp RIGHT  &trans  &trans
              &kp LSHFT   &trans        &trans        &trans        &trans        &trans              &trans      &trans    &trans    &trans     &trans  &trans
                                                      &kp LGUI      &trans        &kp SPACE           &kp RETURN  &trans    &kp RALT
            >;
        };

        Raise_layer {
            bindings = <
              &kp TAB    &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT        &kp CARET   &kp AMPS   &kp ASTRK  &kp LPAR  &kp RPAR  &kp BACKSPACE
              &kp LCTRL  &trans    &trans  &trans    &trans    &trans           &kp MINUS   &kp EQUAL  &kp LBKT   &kp RBKT  &kp BSLH  &kp GRAVE
              &kp LSHFT  &trans    &trans  &trans    &trans    &trans           &kp UNDER   &kp PLUS   &kp LBRC   &kp RBRC  &kp PIPE  &kp TILDE
                                           &kp LGUI  &trans    &kp SPACE        &kp RETURN  &trans     &kp RALT
            >;
        };

        Valorant_layer {
            bindings = <
              &kp TAB    &kp Q  &kp W  &kp E                     &kp R  &kp N4           &none  &none  &none  &none  &none  &none
              &kp LCTRL  &kp A  &kp S  &kp D                     &kp F  &kp G            &none  &none  &none  &none  &none  &none
              &kp LSHFT  &kp B  &kp X  &kp C                     &kp M  &kp N            &none  &none  &none  &none  &none  &none
                                       &mt LS(LC(LEFT_ALT)) ESC  &kp Z  &kp SPACE        &none  &none  &none
            >;
        };

        LTLayer_layer {
            bindings = <
                &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &kp LEFT_PARENTHESIS &kp RIGHT_PARENTHESIS &kp LEFT_BRACE &kp RIGHT_BRACE &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none 
            >;
        };

    };
};